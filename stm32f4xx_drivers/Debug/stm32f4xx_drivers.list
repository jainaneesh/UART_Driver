
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000888  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a30  08000a38  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a30  08000a30  00010a38  2**0
                  CONTENTS
  4 .ARM          00000000  08000a30  08000a30  00010a38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a30  08000a38  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a30  08000a30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a38  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000111b  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000412  00000000  00000000  00011b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00011f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  000120c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002045  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001605  00000000  00000000  00014205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008b55  00000000  00000000  0001580a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e35f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003f8  00000000  00000000  0001e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a18 	.word	0x08000a18

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a18 	.word	0x08000a18

080001e8 <main>:
void SPI2_Inits();



int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
//	char user_data[]="Hello World";
	GPIO_ButtonInit();
 80001ec:	f000 f818 	bl	8000220 <GPIO_ButtonInit>
	SPI2_GPIOInits();
 80001f0:	f000 f844 	bl	800027c <SPI2_GPIOInits>

	SPI2_Inits();
 80001f4:	f000 f86a 	bl	80002cc <SPI2_Inits>
	 * making SSOE bit 1 does NSS output enable
	 * The NSS pin is automatically managed by the hardware.
	 * i.e. when SPE=1, NSS will be pulled low and NSS pin
	 * will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2,ENABLE);
 80001f8:	2101      	movs	r1, #1
 80001fa:	4807      	ldr	r0, [pc, #28]	; (8000218 <main+0x30>)
 80001fc:	f000 fbcb 	bl	8000996 <SPI_SSOEConfig>
	while(1)
	{
		//Wait until the button is pressed
		while(  GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));//When the button is pressed the function evaluates to true and the while loop breaks
 8000200:	bf00      	nop
 8000202:	2100      	movs	r1, #0
 8000204:	4805      	ldr	r0, [pc, #20]	; (800021c <main+0x34>)
 8000206:	f000 fb09 	bl	800081c <GPIO_ReadFromInputPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d1f8      	bne.n	8000202 <main+0x1a>
		delay();//To avoid debouncing
 8000210:	f000 f81e 	bl	8000250 <delay>
		while(  GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));//When the button is pressed the function evaluates to true and the while loop breaks
 8000214:	e7f4      	b.n	8000200 <main+0x18>
 8000216:	bf00      	nop
 8000218:	40003800 	.word	0x40003800
 800021c:	40020000 	.word	0x40020000

08000220 <GPIO_ButtonInit>:
//	while(1);
	return 0;
}

void GPIO_ButtonInit()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpiobtn;
	Gpiobtn.pGPIOx = GPIOA;
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <GPIO_ButtonInit+0x2c>)
 8000228:	607b      	str	r3, [r7, #4]
	Gpiobtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800022a:	2300      	movs	r3, #0
 800022c:	723b      	strb	r3, [r7, #8]
	Gpiobtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800022e:	2300      	movs	r3, #0
 8000230:	727b      	strb	r3, [r7, #9]
	Gpiobtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000232:	2302      	movs	r3, #2
 8000234:	72bb      	strb	r3, [r7, #10]
//	Gpiobtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	Gpiobtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
//	GPIO_PeriClockControl(GPIOA, ENABLE); //This code is in the GPIO driver
	GPIO_Init(&Gpiobtn);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f975 	bl	800052c <GPIO_Init>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40020000 	.word	0x40020000

08000250 <delay>:

void delay(void)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	for (uint32_t i=0;i<=500000/2;i++);
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e002      	b.n	8000262 <delay+0x12>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <delay+0x28>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d9f8      	bls.n	800025c <delay+0xc>
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	0003d090 	.word	0x0003d090

0800027c <SPI2_GPIOInits>:
void SPI2_GPIOInits(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx=GPIOB;
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <SPI2_GPIOInits+0x4c>)
 8000284:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 8000286:	2302      	movs	r3, #2
 8000288:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800028a:	2305      	movs	r3, #5
 800028c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028e:	2300      	movs	r3, #0
 8000290:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800029a:	230d      	movs	r3, #13
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f943 	bl	800052c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f93d 	bl	800052c <GPIO_Init>
	//MISO
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
//	GPIO_Init(&SPIPins);
//
//	NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b2:	230c      	movs	r3, #12
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f937 	bl	800052c <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <SPI2_Inits>:
void SPI2_Inits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <SPI2_Inits+0x38>)
 80002d4:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	2301      	movs	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002da:	2301      	movs	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 80002de:	2302      	movs	r3, #2
 80002e0:	60fb      	str	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
	SPI2handle.SPIConfig.SPI_SMM = SPI_SMM_DI;   //Hardware slave management enabled for NSS
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
	SPI_Init(&SPI2handle);
 80002f2:	463b      	mov	r3, r7
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 faff 	bl	80008f8 <SPI_Init>
}
 80002fa:	bf00      	nop
 80002fc:	3720      	adds	r7, #32
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40003800 	.word	0x40003800

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 fb4b 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ff55 	bl	80001e8 <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800034c:	08000a38 	.word	0x08000a38
  ldr r2, =_sbss
 8000350:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000354:	2000001c 	.word	0x2000001c

08000358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC_IRQHandler>
	...

0800035c <GPIO_PeriClockControl>:
 *
 *  @return					: none
 *  @Note					: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d162      	bne.n	8000434 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a64      	ldr	r2, [pc, #400]	; (8000504 <GPIO_PeriClockControl+0x1a8>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000376:	4b64      	ldr	r3, [pc, #400]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a63      	ldr	r2, [pc, #396]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000382:	e0b9      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a61      	ldr	r2, [pc, #388]	; (800050c <GPIO_PeriClockControl+0x1b0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800038c:	4b5e      	ldr	r3, [pc, #376]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a5d      	ldr	r2, [pc, #372]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e0ae      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a5c      	ldr	r2, [pc, #368]	; (8000510 <GPIO_PeriClockControl+0x1b4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003a2:	4b59      	ldr	r3, [pc, #356]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a58      	ldr	r2, [pc, #352]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e0a3      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a58      	ldr	r2, [pc, #352]	; (8000514 <GPIO_PeriClockControl+0x1b8>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b8:	4b53      	ldr	r3, [pc, #332]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a52      	ldr	r2, [pc, #328]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e098      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a53      	ldr	r2, [pc, #332]	; (8000518 <GPIO_PeriClockControl+0x1bc>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ce:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a4d      	ldr	r2, [pc, #308]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e08d      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a4f      	ldr	r2, [pc, #316]	; (800051c <GPIO_PeriClockControl+0x1c0>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003e4:	4b48      	ldr	r3, [pc, #288]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a47      	ldr	r2, [pc, #284]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e082      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a4a      	ldr	r2, [pc, #296]	; (8000520 <GPIO_PeriClockControl+0x1c4>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003fa:	4b43      	ldr	r3, [pc, #268]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a42      	ldr	r2, [pc, #264]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e077      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a46      	ldr	r2, [pc, #280]	; (8000524 <GPIO_PeriClockControl+0x1c8>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000410:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a3c      	ldr	r2, [pc, #240]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e06c      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a41      	ldr	r2, [pc, #260]	; (8000528 <GPIO_PeriClockControl+0x1cc>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d168      	bne.n	80004f8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a37      	ldr	r2, [pc, #220]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800042c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e061      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a33      	ldr	r2, [pc, #204]	; (8000504 <GPIO_PeriClockControl+0x1a8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800043c:	4b32      	ldr	r3, [pc, #200]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a31      	ldr	r2, [pc, #196]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000442:	f023 0301 	bic.w	r3, r3, #1
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e056      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a2f      	ldr	r2, [pc, #188]	; (800050c <GPIO_PeriClockControl+0x1b0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a2c      	ldr	r2, [pc, #176]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000458:	f023 0302 	bic.w	r3, r3, #2
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e04b      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a2b      	ldr	r2, [pc, #172]	; (8000510 <GPIO_PeriClockControl+0x1b4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a26      	ldr	r2, [pc, #152]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800046e:	f023 0304 	bic.w	r3, r3, #4
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e040      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <GPIO_PeriClockControl+0x1b8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a21      	ldr	r2, [pc, #132]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000484:	f023 0308 	bic.w	r3, r3, #8
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e035      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a22      	ldr	r2, [pc, #136]	; (8000518 <GPIO_PeriClockControl+0x1bc>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e02a      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	; (800051c <GPIO_PeriClockControl+0x1c0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a16      	ldr	r2, [pc, #88]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004b0:	f023 0320 	bic.w	r3, r3, #32
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e01f      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a19      	ldr	r2, [pc, #100]	; (8000520 <GPIO_PeriClockControl+0x1c4>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e014      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <GPIO_PeriClockControl+0x1c8>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e009      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <GPIO_PeriClockControl+0x1cc>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d105      	bne.n	80004f8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40020000 	.word	0x40020000
 8000508:	40023800 	.word	0x40023800
 800050c:	40020400 	.word	0x40020400
 8000510:	40020800 	.word	0x40020800
 8000514:	40020c00 	.word	0x40020c00
 8000518:	40021000 	.word	0x40021000
 800051c:	40021400 	.word	0x40021400
 8000520:	40021800 	.word	0x40021800
 8000524:	40021c00 	.word	0x40021c00
 8000528:	40022000 	.word	0x40022000

0800052c <GPIO_Init>:
 *
 *  @return					: none
 *  @Note					: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff0c 	bl	800035c <GPIO_PeriClockControl>
	//1 Configure the mode of the GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d81f      	bhi.n	800058c <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	4619      	mov	r1, r3
 800056a:	2303      	movs	r3, #3
 800056c:	408b      	lsls	r3, r1
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6819      	ldr	r1, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	e09a      	b.n	80006c2 <GPIO_Init+0x196>

	}else
	{
		//this part will code later
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	2b04      	cmp	r3, #4
 8000592:	d117      	bne.n	80005c4 <GPIO_Init+0x98>
		{
			//1. Configure the falling edge trigger selection register FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b99      	ldr	r3, [pc, #612]	; (80007fc <GPIO_Init+0x2d0>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a95      	ldr	r2, [pc, #596]	; (80007fc <GPIO_Init+0x2d0>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
			//2. Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b94      	ldr	r3, [pc, #592]	; (80007fc <GPIO_Init+0x2d0>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	43d2      	mvns	r2, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a8f      	ldr	r2, [pc, #572]	; (80007fc <GPIO_Init+0x2d0>)
 80005be:	400b      	ands	r3, r1
 80005c0:	6093      	str	r3, [r2, #8]
 80005c2:	e035      	b.n	8000630 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d117      	bne.n	80005fc <GPIO_Init+0xd0>
		{
			//1. Configure the rising edge trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b8b      	ldr	r3, [pc, #556]	; (80007fc <GPIO_Init+0x2d0>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a87      	ldr	r2, [pc, #540]	; (80007fc <GPIO_Init+0x2d0>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]
			//2. Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b86      	ldr	r3, [pc, #536]	; (80007fc <GPIO_Init+0x2d0>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	43d2      	mvns	r2, r2
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a81      	ldr	r2, [pc, #516]	; (80007fc <GPIO_Init+0x2d0>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	60d3      	str	r3, [r2, #12]
 80005fa:	e019      	b.n	8000630 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	795b      	ldrb	r3, [r3, #5]
 8000600:	2b06      	cmp	r3, #6
 8000602:	d115      	bne.n	8000630 <GPIO_Init+0x104>
		{
			//1. Configure both falling edge and rising edge trigger selection register
			// Configure the RTSR register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000604:	4b7d      	ldr	r3, [pc, #500]	; (80007fc <GPIO_Init+0x2d0>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	4a79      	ldr	r2, [pc, #484]	; (80007fc <GPIO_Init+0x2d0>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
			// Configure the FTSR register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061a:	4b78      	ldr	r3, [pc, #480]	; (80007fc <GPIO_Init+0x2d0>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a74      	ldr	r2, [pc, #464]	; (80007fc <GPIO_Init+0x2d0>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR (sys config exti control register)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a6e      	ldr	r2, [pc, #440]	; (8000800 <GPIO_Init+0x2d4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d01d      	beq.n	8000688 <GPIO_Init+0x15c>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a6c      	ldr	r2, [pc, #432]	; (8000804 <GPIO_Init+0x2d8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d016      	beq.n	8000684 <GPIO_Init+0x158>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a6b      	ldr	r2, [pc, #428]	; (8000808 <GPIO_Init+0x2dc>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d00f      	beq.n	8000680 <GPIO_Init+0x154>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a69      	ldr	r2, [pc, #420]	; (800080c <GPIO_Init+0x2e0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d008      	beq.n	800067c <GPIO_Init+0x150>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a68      	ldr	r2, [pc, #416]	; (8000810 <GPIO_Init+0x2e4>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d101      	bne.n	8000678 <GPIO_Init+0x14c>
 8000674:	2304      	movs	r3, #4
 8000676:	e008      	b.n	800068a <GPIO_Init+0x15e>
 8000678:	2300      	movs	r3, #0
 800067a:	e006      	b.n	800068a <GPIO_Init+0x15e>
 800067c:	2303      	movs	r3, #3
 800067e:	e004      	b.n	800068a <GPIO_Init+0x15e>
 8000680:	2302      	movs	r3, #2
 8000682:	e002      	b.n	800068a <GPIO_Init+0x15e>
 8000684:	2301      	movs	r3, #1
 8000686:	e000      	b.n	800068a <GPIO_Init+0x15e>
 8000688:	2300      	movs	r3, #0
 800068a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800068c:	4b61      	ldr	r3, [pc, #388]	; (8000814 <GPIO_Init+0x2e8>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a60      	ldr	r2, [pc, #384]	; (8000814 <GPIO_Init+0x2e8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = ( portcode << temp2 * 4);
 8000698:	7c7a      	ldrb	r2, [r7, #17]
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f103 	lsl.w	r1, r2, r3
 80006a2:	4a5d      	ldr	r2, [pc, #372]	; (8000818 <GPIO_Init+0x2ec>)
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (Intrrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b53      	ldr	r3, [pc, #332]	; (80007fc <GPIO_Init+0x2d0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <GPIO_Init+0x2d0>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
	//2 Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2303      	movs	r3, #3
 80006e6:	408b      	lsls	r3, r1
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6899      	ldr	r1, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

	//3 Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	4619      	mov	r1, r3
 8000724:	2301      	movs	r3, #1
 8000726:	408b      	lsls	r3, r1
 8000728:	43db      	mvns	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	400a      	ands	r2, r1
 8000732:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6859      	ldr	r1, [r3, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	430a      	orrs	r2, r1
 8000742:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
	//4 Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	79db      	ldrb	r3, [r3, #7]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	4619      	mov	r1, r3
 8000766:	2303      	movs	r3, #3
 8000768:	408b      	lsls	r3, r1
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	400a      	ands	r2, r1
 8000774:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	68d9      	ldr	r1, [r3, #12]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	430a      	orrs	r2, r1
 8000784:	60da      	str	r2, [r3, #12]
	//5 Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d131      	bne.n	80007f2 <GPIO_Init+0x2c6>
	{
		//configure this alt function
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	7c3a      	ldrb	r2, [r7, #16]
 80007a6:	3208      	adds	r2, #8
 80007a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	220f      	movs	r2, #15
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	7c3a      	ldrb	r2, [r7, #16]
 80007c0:	4001      	ands	r1, r0
 80007c2:	3208      	adds	r2, #8
 80007c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	7c3a      	ldrb	r2, [r7, #16]
 80007ce:	3208      	adds	r2, #8
 80007d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7a5b      	ldrb	r3, [r3, #9]
 80007d8:	461a      	mov	r2, r3
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	7c3a      	ldrb	r2, [r7, #16]
 80007ea:	4301      	orrs	r1, r0
 80007ec:	3208      	adds	r2, #8
 80007ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800

0800081c <GPIO_ReadFromInputPin>:
 *
 *  @return					: Boolean value - either 0 or 1
 *  @Note					: none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	691a      	ldr	r2, [r3, #16]
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	fa22 f303 	lsr.w	r3, r2, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
	return value;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SPI_PeriClockControl>:
 *
 *  @return					: none
 *  @Note					: none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d120      	bne.n	800089c <SPI_PeriClockControl+0x54>
		{
			if(pSPIx == SPI1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <SPI_PeriClockControl+0xa0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SPI_PeriClockControl+0xa4>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SPI_PeriClockControl+0xa4>)
 8000868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
			}else if (pSPIx == SPI3)
			{
				SPI3_PCLK_DI();
			}
		}
}
 800086e:	e035      	b.n	80008dc <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <SPI_PeriClockControl+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <SPI_PeriClockControl+0xa4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <SPI_PeriClockControl+0xa4>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000884:	e02a      	b.n	80008dc <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI3)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <SPI_PeriClockControl+0xac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d126      	bne.n	80008dc <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <SPI_PeriClockControl+0xa4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <SPI_PeriClockControl+0xa4>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
}
 800089a:	e01f      	b.n	80008dc <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <SPI_PeriClockControl+0xa0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <SPI_PeriClockControl+0x6a>
				SPI1_PCLK_DI();
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ae:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008b0:	e014      	b.n	80008dc <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <SPI_PeriClockControl+0xa8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x80>
				SPI2_PCLK_DI();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008c6:	e009      	b.n	80008dc <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI3)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SPI_PeriClockControl+0xac>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d105      	bne.n	80008dc <SPI_PeriClockControl+0x94>
				SPI3_PCLK_DI();
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SPI_PeriClockControl+0xa4>)
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40003800 	.word	0x40003800
 80008f4:	40003c00 	.word	0x40003c00

080008f8 <SPI_Init>:
 *
 *  @return					: none
 *  @Note					: none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	//First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff9c 	bl	8000848 <SPI_PeriClockControl>

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_MASTER;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d104      	bne.n	800092e <SPI_Init+0x36>
	{
		//BIDI Mode should be cleared
		tempreg &= ~(1 << SPI_BIDIMODE);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e014      	b.n	8000958 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d104      	bne.n	8000940 <SPI_Init+0x48>
	{
		//BIDI Mode should be enabled
		tempreg |= (1 << SPI_BIDIMODE);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00b      	b.n	8000958 <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d107      	bne.n	8000958 <SPI_Init+0x60>
	{
		//BIDI Mode should be cleared
		tempreg &= ~(1 << SPI_BIDIMODE);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094e:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_RX_ONLY);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000956:	60fb      	str	r3, [r7, #12]
	}
	//3. Setting the SPI Serial Clock Speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_BR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]

	//4. Setting the SPI Data Frame Format
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_DFF_BIT;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	02db      	lsls	r3, r3, #11
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CPOL_BIT;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4313      	orrs	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CPHA_BIT;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]

	//Assigning tempreg value to CR1 register
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	601a      	str	r2, [r3, #0]


}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d106      	bne.n	80009b6 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f043 0204 	orr.w	r2, r3, #4
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80009b4:	e005      	b.n	80009c2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f023 0204 	bic.w	r2, r3, #4
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	605a      	str	r2, [r3, #4]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	4d0d      	ldr	r5, [pc, #52]	; (8000a08 <__libc_init_array+0x38>)
 80009d4:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <__libc_init_array+0x3c>)
 80009d6:	1b64      	subs	r4, r4, r5
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	2600      	movs	r6, #0
 80009dc:	42a6      	cmp	r6, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	4d0b      	ldr	r5, [pc, #44]	; (8000a10 <__libc_init_array+0x40>)
 80009e2:	4c0c      	ldr	r4, [pc, #48]	; (8000a14 <__libc_init_array+0x44>)
 80009e4:	f000 f818 	bl	8000a18 <_init>
 80009e8:	1b64      	subs	r4, r4, r5
 80009ea:	10a4      	asrs	r4, r4, #2
 80009ec:	2600      	movs	r6, #0
 80009ee:	42a6      	cmp	r6, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f8:	4798      	blx	r3
 80009fa:	3601      	adds	r6, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a02:	4798      	blx	r3
 8000a04:	3601      	adds	r6, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000a30 	.word	0x08000a30
 8000a0c:	08000a30 	.word	0x08000a30
 8000a10:	08000a30 	.word	0x08000a30
 8000a14:	08000a34 	.word	0x08000a34

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
